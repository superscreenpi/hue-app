{"version":3,"sources":["App.tsx","serviceWorker.ts","store/example/actions.ts","store/example/state.ts","store/example/reducers.ts","store/index.ts","index.tsx"],"names":["App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Types","initialState","valueOne","valueTwo","example","exampleState","rootReducer","combineReducers","action","type","INCREMENT_VALUE","delta","store","createStore","persist","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2OAEaA,EAAgB,WAC3B,OAAO,8CCSHC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,UCnGrDC,E,gBCKCC,EAA6B,CACxCC,SAAU,SACVC,SAAU,G,yBDPAH,K,mCAAAA,M,KEGL,I,OCEMC,EAAe,CAC1BG,QAASC,GAKEC,EAAcC,YAAgB,CACzCH,QDT4B,WAAyD,IAAxDZ,EAAuD,uDAA/CS,EAAcO,EAAiC,uCACpF,OAAQA,EAAOC,MACb,KAAKT,EAAMU,gBACT,OAAO,eAAKlB,EAAZ,CAAmBW,SAAUX,EAAMW,SAAWK,EAAOG,QACvD,QACE,OAAOnB,MEGb,IAAMoB,EAAQC,YAAYP,EAAaL,EAAca,kBAAQ,mBAE7DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINM,SAASC,eAAe,SLInB,SAAkBrC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqC,IAAIC,WAAwB7C,OAAOC,SAAS6C,MACpDC,SAAW/C,OAAOC,SAAS8C,OAIvC,OAGF/C,OAAOgD,iBAAiB,QAAQ,WAC9B,IAAM3C,EAAK,UAAMwC,WAAN,sBAEP/C,IAgEV,SAAiCO,EAAeC,GAE9C2C,MAAM5C,EAAO,CACX6C,QAAS,CAAE,iBAAkB,YAE5BxC,MAAK,SAACyC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEzEhD,UAAUC,cAAcgD,MAAM9C,MAAK,SAACC,GAClCA,EAAa8C,aAAa/C,MAAK,WAC7BV,OAAOC,SAASyD,eAKpBtD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAnFVwC,CAAwBtD,EAAOC,GAI/BC,UAAUC,cAAcgD,MAAM9C,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OK7B/BE,K","file":"static/js/main.7ab1b79e.chunk.js","sourcesContent":["import React from 'react';\n\nexport const App: React.FC = () => {\n  return <div>Hello World!</div>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n","export enum Types {\n  INCREMENT_VALUE = 'INCREMENT_VALUE',\n}\n\nexport interface IncrementAction {\n  type: Types.INCREMENT_VALUE;\n  delta: number;\n}\n\nexport type Action = IncrementAction;\n\nexport function incrementValue(delta = 1): IncrementAction {\n  return {\n    type: Types.INCREMENT_VALUE,\n    delta,\n  };\n}\n","export interface ExampleState {\n  valueOne: string;\n  valueTwo: number;\n}\n\nexport const initialState: ExampleState = {\n  valueOne: 'is set',\n  valueTwo: 0,\n};\n","import { ExampleState, initialState } from './state';\nimport { Action, Types } from './actions';\n\nexport const exampleReducer = (state = initialState, action: Action): ExampleState => {\n  switch (action.type) {\n    case Types.INCREMENT_VALUE:\n      return { ...state, valueTwo: state.valueTwo + action.delta };\n    default:\n      return state;\n  }\n};\n","import { initialState as exampleState } from './example/state';\nimport { combineReducers } from 'redux';\nimport { exampleReducer } from './example/reducers';\nimport { useSelector } from 'react-redux';\n\nexport const initialState = {\n  example: exampleState,\n};\n\nexport type GlobalState = typeof initialState;\n\nexport const rootReducer = combineReducers({\n  example: exampleReducer,\n});\n\nexport function useGlobal<T>(selector: (state: GlobalState) => T): T {\n  return useSelector<GlobalState, T>(selector);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.scss';\nimport { HashRouter } from 'react-router-dom';\nimport { persist } from '@superscreenpi/redux-persist-localstorage/dist';\nimport { initialState, rootReducer } from './store';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, initialState, persist('launcher/state'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}